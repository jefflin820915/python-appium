"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.SETTINGS_HELPER_PKG_ID = exports.helpers = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _path = _interopRequireDefault(require("path"));

var _asyncbox = require("asyncbox");

var _logger = _interopRequireDefault(require("./logger"));

var _appiumSupport = require("appium-support");

var _ioAppium = require("io.appium.settings");

var _bootstrap = _interopRequireDefault(require("./bootstrap"));

var _bluebird = _interopRequireDefault(require("bluebird"));

var _appiumAdb = _interopRequireDefault(require("appium-adb"));

var _unlockHelpers = _interopRequireWildcard(require("./unlock-helpers"));

var _os = require("os");

var _semver = _interopRequireDefault(require("semver"));

const PACKAGE_INSTALL_TIMEOUT = 90000;
const CHROME_BROWSER_PACKAGE_ACTIVITY = {
  chrome: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  chromium: {
    pkg: 'org.chromium.chrome.shell',
    activity: '.ChromeShellActivity'
  },
  chromebeta: {
    pkg: 'com.chrome.beta',
    activity: 'com.google.android.apps.chrome.Main'
  },
  browser: {
    pkg: 'com.android.browser',
    activity: 'com.android.browser.BrowserActivity'
  },
  'chromium-browser': {
    pkg: 'org.chromium.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  },
  'chromium-webview': {
    pkg: 'org.chromium.webview_shell',
    activity: 'org.chromium.webview_shell.WebViewBrowserActivity'
  },
  default: {
    pkg: 'com.android.chrome',
    activity: 'com.google.android.apps.chrome.Main'
  }
};
const SETTINGS_HELPER_PKG_ID = 'io.appium.settings';
exports.SETTINGS_HELPER_PKG_ID = SETTINGS_HELPER_PKG_ID;
const SETTINGS_HELPER_UNLOCK_ACTIVITY = '.Unlock';
const EMULATOR_PATTERN = /\bemulator\b/i;
let helpers = {};
exports.helpers = helpers;

helpers.createBaseADB = async function createBaseADB(opts = {}) {
  const {
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword,
    remoteAppsCacheLimit,
    buildToolsVersion,
    allowOfflineDevices
  } = opts;
  return await _appiumAdb.default.createADB({
    adbPort,
    suppressKillServer,
    remoteAdbHost,
    clearDeviceLogsOnStart,
    adbExecTimeout,
    useKeystore,
    keystorePath,
    keystorePassword,
    keyAlias,
    keyPassword,
    remoteAppsCacheLimit,
    buildToolsVersion,
    allowOfflineDevices
  });
};

helpers.prepareEmulator = async function prepareEmulator(adb, opts) {
  let {
    avd,
    avdArgs,
    language,
    locale,
    avdLaunchTimeout,
    avdReadyTimeout
  } = opts;

  if (!avd) {
    throw new Error('Cannot launch AVD without AVD name');
  }

  let avdName = avd.replace('@', '');
  let runningAVD = await adb.getRunningAVD(avdName);

  if (runningAVD !== null) {
    if (avdArgs && avdArgs.toLowerCase().indexOf('-wipe-data') > -1) {
      _logger.default.debug(`Killing '${avdName}' because it needs to be wiped at start.`);

      await adb.killEmulator(avdName);
    } else {
      _logger.default.debug('Not launching AVD because it is already running.');

      return;
    }
  }

  avdArgs = this.prepareAVDArgs(opts, adb, avdArgs);
  await adb.launchAVD(avd, avdArgs, language, locale, avdLaunchTimeout, avdReadyTimeout);
};

helpers.prepareAVDArgs = function prepareAVDArgs(opts, adb, avdArgs) {
  let args = avdArgs ? [avdArgs] : [];

  if (!_lodash.default.isUndefined(opts.networkSpeed)) {
    let networkSpeed = this.ensureNetworkSpeed(adb, opts.networkSpeed);
    args.push('-netspeed', networkSpeed);
  }

  if (opts.isHeadless) {
    args.push('-no-window');
  }

  return args.join(' ');
};

helpers.ensureNetworkSpeed = function ensureNetworkSpeed(adb, networkSpeed) {
  if (_lodash.default.values(adb.NETWORK_SPEED).indexOf(networkSpeed) !== -1) {
    return networkSpeed;
  }

  _logger.default.warn(`Wrong network speed param ${networkSpeed}, using default: full. Supported values: ${_lodash.default.values(adb.NETWORK_SPEED)}`);

  return adb.NETWORK_SPEED.FULL;
};

helpers.ensureDeviceLocale = async function ensureDeviceLocale(adb, language, country, script = null) {
  if (!_lodash.default.isString(language) && !_lodash.default.isString(country)) {
    _logger.default.warn(`setDeviceLanguageCountry requires language or country.`);

    _logger.default.warn(`Got language: '${language}' and country: '${country}'`);

    return;
  }

  await adb.setDeviceLanguageCountry(language, country, script);

  if (!(await adb.ensureCurrentLocale(language, country, script))) {
    const message = script ? `language: ${language}, country: ${country} and script: ${script}` : `language: ${language} and country: ${country}`;
    throw new Error(`Failed to set ${message}`);
  }
};

helpers.getDeviceInfoFromCaps = async function getDeviceInfoFromCaps(opts = {}) {
  const adb = await helpers.createBaseADB(opts);
  let udid = opts.udid;
  let emPort = null;

  if (opts.avd) {
    await helpers.prepareEmulator(adb, opts);
    udid = adb.curDeviceId;
    emPort = adb.emulatorPort;
  } else {
    _logger.default.info('Retrieving device list');

    let devices = await adb.getDevicesWithRetry();

    if (udid) {
      if (!_lodash.default.includes(_lodash.default.map(devices, 'udid'), udid)) {
        _logger.default.errorAndThrow(`Device ${udid} was not in the list of connected devices`);
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else if (opts.platformVersion) {
      opts.platformVersion = `${opts.platformVersion}`.trim();
      const platformVersion = _semver.default.coerce(opts.platformVersion) || opts.platformVersion;

      _logger.default.info(`Looking for a device with Android '${platformVersion}'`);

      const availDevices = [];
      let partialMatchCandidate = null;

      for (const device of devices) {
        await adb.setDeviceId(device.udid);
        const rawDeviceOS = await adb.getPlatformVersion();
        availDevices.push(`${device.udid} (${rawDeviceOS})`);
        const deviceOS = _semver.default.coerce(rawDeviceOS) || rawDeviceOS;

        if (!deviceOS) {
          continue;
        }

        const bothVersionsCanBeCoerced = _semver.default.valid(deviceOS) && _semver.default.valid(platformVersion);

        const bothVersionsAreStrings = _lodash.default.isString(deviceOS) && _lodash.default.isString(platformVersion);

        if (bothVersionsCanBeCoerced && deviceOS.version === platformVersion.version || bothVersionsAreStrings && _lodash.default.toLower(deviceOS) === _lodash.default.toLower(platformVersion)) {
          udid = device.udid;
          break;
        } else if (!bothVersionsCanBeCoerced) {
          continue;
        }

        if ((!_lodash.default.includes(opts.platformVersion, '.') && platformVersion.major === deviceOS.major || platformVersion.major === deviceOS.major && platformVersion.minor === deviceOS.minor) && (partialMatchCandidate && _semver.default.gt(deviceOS, _lodash.default.values(partialMatchCandidate)[0]) || !partialMatchCandidate)) {
          partialMatchCandidate = {
            [device.udid]: deviceOS
          };
        }
      }

      if (!udid && partialMatchCandidate) {
        udid = _lodash.default.keys(partialMatchCandidate)[0];
        await adb.setDeviceId(udid);
      }

      if (!udid) {
        _logger.default.errorAndThrow(`Unable to find an active device or emulator ` + `with OS ${opts.platformVersion}. The following are available: ` + availDevices.join(', '));
      }

      emPort = adb.getPortFromEmulatorString(udid);
    } else {
      udid = devices[0].udid;
      emPort = adb.getPortFromEmulatorString(udid);
    }
  }

  _logger.default.info(`Using device: ${udid}`);

  return {
    udid,
    emPort
  };
};

helpers.createADB = async function createADB(opts = {}) {
  const {
    udid,
    emPort
  } = opts;
  const adb = await helpers.createBaseADB(opts);
  adb.setDeviceId(udid);

  if (emPort) {
    adb.setEmulatorPort(emPort);
  }

  return adb;
};

helpers.validatePackageActivityNames = function validatePackageActivityNames(opts) {
  for (const key of ['appPackage', 'appActivity', 'appWaitPackage', 'appWaitActivity']) {
    const name = opts[key];

    if (!name) {
      continue;
    }

    const match = /([^\w.*,])+/.exec(name);

    if (!match) {
      continue;
    }

    _logger.default.warn(`Capability '${key}' is expected to only include latin letters, digits, underscore, dot, comma and asterisk characters.`);

    _logger.default.warn(`Current value '${name}' has non-matching character at index ${match.index}: '${name.substring(0, match.index + 1)}'`);
  }
};

helpers.getLaunchInfo = async function getLaunchInfo(adb, opts) {
  let {
    app,
    appPackage,
    appActivity,
    appWaitPackage,
    appWaitActivity
  } = opts;

  if (!app) {
    _logger.default.warn('No app sent in, not parsing package/activity');

    return;
  }

  this.validatePackageActivityNames(opts);

  if (appPackage && appActivity) {
    return;
  }

  _logger.default.debug('Parsing package and activity from app manifest');

  let {
    apkPackage,
    apkActivity
  } = await adb.packageAndLaunchActivityFromManifest(app);

  if (apkPackage && !appPackage) {
    appPackage = apkPackage;
  }

  if (!appWaitPackage) {
    appWaitPackage = appPackage;
  }

  if (apkActivity && !appActivity) {
    appActivity = apkActivity;
  }

  if (!appWaitActivity) {
    appWaitActivity = appActivity;
  }

  _logger.default.debug(`Parsed package and activity are: ${apkPackage}/${apkActivity}`);

  return {
    appPackage,
    appWaitPackage,
    appActivity,
    appWaitActivity
  };
};

helpers.resetApp = async function resetApp(adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;

  if (!appPackage) {
    throw new Error("'appPackage' option is required");
  }

  const isInstalled = await adb.isAppInstalled(appPackage);

  if (isInstalled) {
    try {
      await adb.forceStop(appPackage);
    } catch (ign) {}

    if (!fullReset && fastReset) {
      const output = await adb.clear(appPackage);

      if (_lodash.default.isString(output) && output.toLowerCase().includes('failed')) {
        throw new Error(`Cannot clear the application data of '${appPackage}'. Original error: ${output}`);
      }

      if (autoGrantPermissions) {
        try {
          await adb.grantAllPermissions(appPackage);
        } catch (error) {
          _logger.default.error(`Unable to grant permissions requested. Original error: ${error.message}`);
        }
      }

      _logger.default.debug(`Performed fast reset on the installed '${appPackage}' application (stop and clear)`);

      return;
    }
  }

  if (!app) {
    throw new Error("'app' option is required for reinstall");
  }

  _logger.default.debug(`Running full reset on '${appPackage}' (reinstall)`);

  if (isInstalled) {
    await adb.uninstallApk(appPackage);
  }

  await adb.install(app, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages
  });
};

helpers.installApk = async function installApk(adb, opts = {}) {
  const {
    app,
    appPackage,
    fastReset,
    fullReset,
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages,
    enforceAppInstall
  } = opts;

  if (!app || !appPackage) {
    throw new Error("'app' and 'appPackage' options are required");
  }

  if (fullReset) {
    await this.resetApp(adb, opts);
    return;
  }

  const {
    appState,
    wasUninstalled
  } = await adb.installOrUpgrade(app, appPackage, {
    grantPermissions: autoGrantPermissions,
    timeout: androidInstallTimeout,
    allowTestPackages,
    enforceCurrentBuild: enforceAppInstall
  });
  const isInstalledOverExistingApp = !wasUninstalled && appState !== adb.APP_INSTALL_STATE.NOT_INSTALLED;

  if (fastReset && isInstalledOverExistingApp) {
    _logger.default.info(`Performing fast reset on '${appPackage}'`);

    await this.resetApp(adb, opts);
  }
};

helpers.installOtherApks = async function installOtherApks(otherApps, adb, opts) {
  let {
    androidInstallTimeout = PACKAGE_INSTALL_TIMEOUT,
    autoGrantPermissions,
    allowTestPackages
  } = opts;
  await _bluebird.default.all(otherApps.map(otherApp => {
    _logger.default.debug(`Installing app: ${otherApp}`);

    return adb.installOrUpgrade(otherApp, null, {
      grantPermissions: autoGrantPermissions,
      timeout: androidInstallTimeout,
      allowTestPackages
    });
  }));
};

helpers.uninstallOtherPackages = async function uninstallOtherPackages(adb, appPackages, filterPackages = []) {
  if (appPackages.includes('*')) {
    _logger.default.debug('Uninstall third party packages');

    appPackages = await this.getThirdPartyPackages(adb, filterPackages);
  }

  _logger.default.debug(`Uninstalling packages: ${appPackages}`);

  await _bluebird.default.all(appPackages.map(appPackage => adb.uninstallApk(appPackage)));
};

helpers.getThirdPartyPackages = async function getThirdPartyPackages(adb, filterPackages = []) {
  try {
    const packagesString = await adb.shell(['pm', 'list', 'packages', '-3']);
    const appPackagesArray = packagesString.trim().replace(/package:/g, '').split(_os.EOL);

    _logger.default.debug(`'${appPackagesArray}' filtered with '${filterPackages}'`);

    return _lodash.default.difference(appPackagesArray, filterPackages);
  } catch (err) {
    _logger.default.warn(`Unable to get packages with 'adb shell pm list packages -3': ${err.message}`);

    return [];
  }
};

helpers.initUnicodeKeyboard = async function initUnicodeKeyboard(adb) {
  _logger.default.debug('Enabling Unicode keyboard support');

  let defaultIME = await adb.defaultIME();

  _logger.default.debug(`Unsetting previous IME ${defaultIME}`);

  const appiumIME = `${SETTINGS_HELPER_PKG_ID}/.UnicodeIME`;

  _logger.default.debug(`Setting IME to '${appiumIME}'`);

  await adb.enableIME(appiumIME);
  await adb.setIME(appiumIME);
  return defaultIME;
};

helpers.setMockLocationApp = async function setMockLocationApp(adb, app) {
  try {
    if ((await adb.getApiLevel()) < 23) {
      await adb.shell(['settings', 'put', 'secure', 'mock_location', '1']);
    } else {
      await adb.shell(['appops', 'set', app, 'android:mock_location', 'allow']);
    }
  } catch (err) {
    _logger.default.warn(`Unable to set mock location for app '${app}': ${err.message}`);
  }
};

helpers.installHelperApp = async function installHelperApp(adb, apkPath, packageId) {
  await (0, _asyncbox.retry)(2, async function retryInstallHelperApp() {
    await adb.installOrUpgrade(apkPath, packageId, {
      grantPermissions: true
    });
  });
};

helpers.pushSettingsApp = async function pushSettingsApp(adb, throwError = false) {
  _logger.default.debug('Pushing settings apk to device...');

  try {
    await helpers.installHelperApp(adb, _ioAppium.path, SETTINGS_HELPER_PKG_ID, throwError);
  } catch (err) {
    if (throwError) {
      throw err;
    }

    _logger.default.warn(`Ignored error while installing '${_ioAppium.path}': ` + `'${err.message}'. Features that rely on this helper ` + 'require the apk such as toggle WiFi and getting location ' + 'will raise an error if you try to use them.');
  }

  if (await adb.processExists(SETTINGS_HELPER_PKG_ID)) {
    _logger.default.debug(`${SETTINGS_HELPER_PKG_ID} is already running. ` + `There is no need to reset its permissions.`);

    return;
  }

  if ((await adb.getApiLevel()) <= 23) {
    const perms = ['SET_ANIMATION_SCALE', 'CHANGE_CONFIGURATION', 'ACCESS_FINE_LOCATION'];

    _logger.default.info(`Granting permissions ${perms} to '${SETTINGS_HELPER_PKG_ID}'`);

    await adb.grantPermissions(SETTINGS_HELPER_PKG_ID, perms.map(x => `android.permission.${x}`));
  }

  try {
    await adb.requireRunningSettingsApp();
  } catch (err) {
    _logger.default.debug(err);

    if (throwError) {
      throw err;
    }
  }
};

helpers.pushStrings = async function pushStrings(language, adb, opts) {
  const remoteDir = '/data/local/tmp';
  const stringsJson = 'strings.json';

  const remoteFile = _path.default.posix.resolve(remoteDir, stringsJson);

  await adb.rimraf(remoteFile);
  let app;

  try {
    app = opts.app || (await adb.pullApk(opts.appPackage, opts.tmpDir));
  } catch (err) {
    _logger.default.info(`Failed to pull an apk from '${opts.appPackage}' to '${opts.tmpDir}'. Original error: ${err.message}`);
  }

  if (_lodash.default.isEmpty(opts.appPackage) || !(await _appiumSupport.fs.exists(app))) {
    _logger.default.debug(`No app or package specified. Returning empty strings`);

    return {};
  }

  const stringsTmpDir = _path.default.resolve(opts.tmpDir, opts.appPackage);

  try {
    _logger.default.debug('Extracting strings from apk', app, language, stringsTmpDir);

    const {
      apkStrings,
      localPath
    } = await adb.extractStringsFromApk(app, language, stringsTmpDir);
    await adb.push(localPath, remoteDir);
    return apkStrings;
  } catch (err) {
    _logger.default.warn(`Could not get strings, continuing anyway. Original error: ${err.message}`);

    await adb.shell('echo', [`'{}' > ${remoteFile}`]);
  } finally {
    await _appiumSupport.fs.rimraf(stringsTmpDir);
  }

  return {};
};

helpers.unlockWithUIAutomation = async function unlockWithUIAutomation(driver, adb, unlockCapabilities) {
  let unlockType = unlockCapabilities.unlockType;

  if (!_unlockHelpers.default.isValidUnlockType(unlockType)) {
    throw new Error(`Invalid unlock type ${unlockType}`);
  }

  let unlockKey = unlockCapabilities.unlockKey;

  if (!_unlockHelpers.default.isValidKey(unlockType, unlockKey)) {
    throw new Error(`Missing unlockKey ${unlockKey} capability for unlockType ${unlockType}`);
  }

  const unlockMethod = {
    [_unlockHelpers.PIN_UNLOCK]: _unlockHelpers.default.pinUnlock,
    [_unlockHelpers.PASSWORD_UNLOCK]: _unlockHelpers.default.passwordUnlock,
    [_unlockHelpers.PATTERN_UNLOCK]: _unlockHelpers.default.patternUnlock,
    [_unlockHelpers.FINGERPRINT_UNLOCK]: _unlockHelpers.default.fingerprintUnlock
  }[unlockType];
  await unlockMethod(adb, driver, unlockCapabilities);
};

helpers.unlockWithHelperApp = async function unlockWithHelperApp(adb) {
  _logger.default.info('Unlocking screen');

  let firstRun = true;
  await (0, _asyncbox.retry)(3, async function launchHelper() {
    if (firstRun) {
      firstRun = false;
    } else {
      try {
        if (!(await adb.isScreenLocked())) {
          return;
        }
      } catch (e) {
        _logger.default.warn(`Error in isScreenLocked: ${e.message}`);

        _logger.default.warn('"adb shell dumpsys window" command has timed out.');

        _logger.default.warn('The reason of this timeout is the delayed adb response. Resetting adb server can improve it.');
      }
    }

    _logger.default.info(`Launching ${SETTINGS_HELPER_UNLOCK_ACTIVITY}`);

    await adb.shell(['am', 'start', '-n', `${SETTINGS_HELPER_PKG_ID}/${SETTINGS_HELPER_UNLOCK_ACTIVITY}`, '-c', 'android.intent.category.LAUNCHER', '-a', 'android.intent.action.MAIN', '-f', '0x10200000']);
    await _bluebird.default.delay(1000);
  });
};

helpers.unlock = async function unlock(driver, adb, capabilities) {
  if (!(await adb.isScreenLocked())) {
    _logger.default.info('Screen already unlocked, doing nothing');

    return;
  }

  _logger.default.debug('Screen is locked, trying to unlock');

  if (_lodash.default.isUndefined(capabilities.unlockType)) {
    _logger.default.warn('Using app unlock, this is going to be deprecated!');

    await helpers.unlockWithHelperApp(adb);
  } else {
    await helpers.unlockWithUIAutomation(driver, adb, {
      unlockType: capabilities.unlockType,
      unlockKey: capabilities.unlockKey
    });
    await helpers.verifyUnlock(adb, capabilities.unlockSuccessTimeout);
  }
};

helpers.verifyUnlock = async function verifyUnlock(adb, unlockSuccessTimeout) {
  let successTimeout = unlockSuccessTimeout || 2000;
  await (0, _asyncbox.retryInterval)(successTimeout / 1000, successTimeout, async () => {
    if (await adb.isScreenLocked()) {
      throw new Error('Screen did not unlock successfully, retrying');
    }

    _logger.default.debug('Screen unlocked successfully');
  });
};

helpers.initDevice = async function initDevice(adb, opts) {
  if (opts.skipDeviceInitialization) {
    _logger.default.info(`'skipDeviceInitialization' is set. Skipping device initialization.`);
  } else {
    await adb.waitForDevice();
    const shouldThrowError = opts.language || opts.locale || opts.localeScript || opts.unicodeKeyboard || opts.disableWindowAnimation || !opts.skipUnlock;
    await helpers.pushSettingsApp(adb, shouldThrowError);
  }

  if (!opts.avd) {
    await helpers.setMockLocationApp(adb, SETTINGS_HELPER_PKG_ID);
  }

  if (opts.language || opts.locale) {
    await helpers.ensureDeviceLocale(adb, opts.language, opts.locale, opts.localeScript);
  }

  if (opts.skipLogcatCapture) {
    _logger.default.info(`'skipLogcatCapture' is set. Skipping starting logcat capture.`);
  } else {
    await adb.startLogcat();
  }

  if (opts.unicodeKeyboard) {
    return await helpers.initUnicodeKeyboard(adb);
  }
};

helpers.removeNullProperties = function removeNullProperties(obj) {
  for (let key of _lodash.default.keys(obj)) {
    if (_lodash.default.isNull(obj[key]) || _lodash.default.isUndefined(obj[key])) {
      delete obj[key];
    }
  }
};

helpers.truncateDecimals = function truncateDecimals(number, digits) {
  let multiplier = Math.pow(10, digits),
      adjustedNum = number * multiplier,
      truncatedNum = Math[adjustedNum < 0 ? 'ceil' : 'floor'](adjustedNum);
  return truncatedNum / multiplier;
};

helpers.isChromeBrowser = function isChromeBrowser(browser) {
  return _lodash.default.includes(Object.keys(CHROME_BROWSER_PACKAGE_ACTIVITY), (browser || '').toLowerCase());
};

helpers.getChromePkg = function getChromePkg(browser) {
  return CHROME_BROWSER_PACKAGE_ACTIVITY[browser.toLowerCase()] || CHROME_BROWSER_PACKAGE_ACTIVITY.default;
};

helpers.removeAllSessionWebSocketHandlers = async function removeAllSessionWebSocketHandlers(server, sessionId) {
  if (!server || !_lodash.default.isFunction(server.getWebSocketHandlers)) {
    return;
  }

  const activeHandlers = await server.getWebSocketHandlers(sessionId);

  for (const pathname of _lodash.default.keys(activeHandlers)) {
    await server.removeWebSocketHandler(pathname);
  }
};

helpers.parseArray = function parseArray(cap) {
  let parsedCaps;

  try {
    parsedCaps = JSON.parse(cap);
  } catch (ign) {}

  if (_lodash.default.isArray(parsedCaps)) {
    return parsedCaps;
  } else if (_lodash.default.isString(cap)) {
    return [cap];
  }

  throw new Error(`must provide a string or JSON Array; received ${cap}`);
};

helpers.validateDesiredCaps = function validateDesiredCaps(caps) {
  if (caps.browserName) {
    if (caps.app) {
      _logger.default.warn(`The desired capabilities should generally not include both an 'app' and a 'browserName'`);
    }

    if (caps.appPackage) {
      _logger.default.errorAndThrow(`The desired should not include both of an 'appPackage' and a 'browserName'`);
    }
  }

  if (caps.uninstallOtherPackages) {
    try {
      this.parseArray(caps.uninstallOtherPackages);
    } catch (e) {
      _logger.default.errorAndThrow(`Could not parse "uninstallOtherPackages" capability: ${e.message}`);
    }
  }

  return true;
};

helpers.adjustBrowserSessionCaps = function adjustBrowserSessionCaps(caps = {}) {
  const {
    browserName
  } = caps;

  _logger.default.info(`The current session is considered browser-based`);

  _logger.default.info(`Supported browser names: ${JSON.stringify(_lodash.default.keys(CHROME_BROWSER_PACKAGE_ACTIVITY))}`);

  if (caps.appPackage || caps.appActivity) {
    _logger.default.info(`Not overriding appPackage/appActivity capability values for '${browserName}' ` + 'because some of them have been already provided');

    return caps;
  }

  const {
    pkg,
    activity
  } = this.getChromePkg(browserName);
  caps.appPackage = pkg;
  caps.appActivity = activity;

  _logger.default.info(`appPackage/appActivity capabilities have been automatically set to ${pkg}/${activity} ` + `for '${browserName}'`);

  _logger.default.info(`Consider changing the browserName to the one from the list of supported browser names ` + `or provide custom appPackage/appActivity capability values if the automatically assigned ones do ` + `not make sense`);

  return caps;
};

helpers.isEmulator = function isEmulator(adb, opts) {
  const possibleNames = [opts.udid, adb === null || adb === void 0 ? void 0 : adb.curDeviceId];
  return !!opts.avd || possibleNames.some(x => EMULATOR_PATTERN.test(x));
};

helpers.bootstrap = _bootstrap.default;
helpers.unlocker = _unlockHelpers.default;
var _default = helpers;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,
